import { Metadata } from "next";
import HomeClient from "./HomeClient";

// Enable ISR with 60-second revalidation
export const revalidate = 60;

// Generate static params for all published landing pages
export async function generateStaticParams() {
  // For now, we'll use the environment variables to generate the single page
  // In the future, this could be expanded to generate multiple pages
  const templateId = process.env.NEXT_PUBLIC_TEMPLATE_ID;
  const id = process.env.NEXT_PUBLIC_ID;
  
  if (!templateId || !id) {
    console.warn('Missing NEXT_PUBLIC_TEMPLATE_ID or NEXT_PUBLIC_ID environment variables');
    return [];
  }

  return [{ templateId, id }];
}

// Server-side data fetching removed from main render; content will use context via HomeClient

// Generate metadata for Next.js App Router
export async function generateMetadata(): Promise<Metadata> {
  // Metadata still reads from server to populate SEO; can be adjusted if DB is unavailable
  const { getLandingPageData } = await import("@/lib/data");
  const landingPageData = await getLandingPageData();
  if (!landingPageData) {
    return {
      title: "Create Next App",
      description: "Generated by create next app",
    };
  }
  const { seoData, businessName, images } = landingPageData;
  
  // Get images for Open Graph
  const logoImage = images?.find((img) => img.slotName === 'logo-image')?.imageUrl;
  const heroImage = images?.find((img) => img.slotName === 'hero-image-1' || img.category === 'hero')?.imageUrl;
  const ogImage = logoImage || heroImage;
  
  return {
    title: seoData.title,
    description: seoData.description,
    keywords: seoData.keywords?.join(', '),
    authors: [{ name: businessName }],
    creator: businessName,
    publisher: businessName,
    robots: seoData.isIndex ? 'index,follow' : 'noindex,nofollow',
    
    // Open Graph
    openGraph: {
      title: seoData.title,
      description: seoData.description,
      url: seoData.canonicalUrl,
      siteName: businessName,
      images: ogImage ? [{
        url: ogImage,
        alt: `${businessName} - ${seoData.title}`,
      }] : [],
      locale: 'en_US',
      type: 'website',
    },
    
    // Twitter
    twitter: {
      card: 'summary_large_image',
      title: seoData.title,
      description: seoData.description,
      images: ogImage ? [ogImage] : [],
    },
    
    // Additional metadata
    alternates: {
      canonical: seoData.canonicalUrl,
    },
    
    // Verification and other meta tags
    other: {
      'theme-color': landingPageData.themeData?.primaryColor,
      'focused-keywords': seoData.focusedKeywords?.join(', ') || '',
    },
  };
}

export default function Home() {
  return <HomeClient />;
}
